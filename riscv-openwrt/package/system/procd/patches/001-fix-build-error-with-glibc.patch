diff --git a/jail/jail.c b/jail/jail.c
index bfa2587..d8682af 100644
--- a/jail/jail.c
+++ b/jail/jail.c
@@ -585,6 +585,7 @@ static int create_devices(void)
 {
 	struct mknod_args **cur, *curdef;
 	char *path, *tmp;
+	int rval;
 
 	if (!opts.devices)
 		goto only_default_devices;
@@ -640,11 +641,15 @@ only_default_devices:
 	}
 
 	/* Dev symbolic links as defined in OCI spec */
-	(void) symlink("/dev/pts/ptmx", "/dev/ptmx");
-	(void) symlink("/proc/self/fd", "/dev/fd");
-	(void) symlink("/proc/self/fd/0", "/dev/stdin");
-	(void) symlink("/proc/self/fd/1", "/dev/stdout");
-	(void) symlink("/proc/self/fd/2", "/dev/stderr");
+	rval  = symlink("/dev/pts/ptmx", "/dev/ptmx");
+	rval += symlink("/proc/self/fd", "/dev/fd");
+	rval += symlink("/proc/self/fd/0", "/dev/stdin");
+	rval += symlink("/proc/self/fd/1", "/dev/stdout");
+	rval += symlink("/proc/self/fd/2", "/dev/stderr");
+	if (rval != 0) {
+		fprintf(stderr, "Error, symlink has failed: %d\n", rval);
+		fflush(stderr);
+	}
 
 	return 0;
 }
@@ -729,6 +734,7 @@ static int build_jail_fs(void)
 
 	/* make sure /etc/resolv.conf exists if in new network namespace */
 	if (opts.namespace & CLONE_NEWNET) {
+		int rval;
 		char jailetc[PATH_MAX], jaillink[PATH_MAX];
 
 		snprintf(jailetc, PATH_MAX, "%s/etc", jail_root);
@@ -737,7 +743,12 @@ static int build_jail_fs(void)
 		if (overlaydir)
 			unlink(jaillink);
 
-		(void) symlink("../dev/resolv.conf.d/resolv.conf.auto", jaillink);
+		rval = symlink("../dev/resolv.conf.d/resolv.conf.auto", jaillink);
+		if (rval) {
+			fprintf(stderr, "Error, symlink(%s) has failed: %s\n",
+				jaillink, strerror(errno));
+			fflush(stderr);
+		}
 	}
 
 	run_hooks(opts.hooks.createContainer, enter_jail_fs);
@@ -2729,8 +2740,13 @@ int main(int argc, char **argv)
 		opts.envp = calloc(1 + envn, sizeof(char*));
 		list_for_each_entry_safe(enve, tmpenve, &envl, list) {
 			tmp = getenv(enve->envarg);
-			if (tmp)
-				asprintf(&opts.envp[envc++], "%s=%s", enve->envarg, tmp);
+			if (tmp) {
+				if (asprintf(&opts.envp[envc++], "%s=%s", enve->envarg, tmp) < 0) {
+					envc--;
+					fprintf(stderr, "Error, asprintf(...): %s\n", strerror(errno));
+					fflush(stderr);
+				}
+			}
 
 			list_del(&enve->list);
 			free(enve);
